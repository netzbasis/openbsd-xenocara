.\" Copyright 1988, 1994, 1998  The Open Group
.\"
.\" Permission to use, copy, modify, distribute, and sell this software and its
.\" documentation for any purpose is hereby granted without fee, provided that
.\" the above copyright notice appear in all copies and that both that
.\" copyright notice and this permission notice appear in supporting
.\" documentation.
.\"
.\" The above copyright notice and this permission notice shall be included
.\" in all copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained in this notice, the name of The Open Group shall
.\" not be used in advertising or otherwise to promote the sale, use or
.\" other dealings in this Software without prior written authorization
.\" from The Open Group.
.\"
.\"
.TH XENODM 1 __xorgversion__
.SH NAME
xenodm \- X Display Manager
.SH SYNOPSIS
.B xenodm
[
.B \-config
.I configuration_file
] [
.B \-nodaemon
] [
.B \-debug
.I debug_level
] [
.B \-error
.I error_log_file
] [
.B \-resources
.I resource_file
] [
.B \-server
.I server_entry
] [
.B \-session
.I session_program
]
.SH DESCRIPTION
.I Xenodm
manages a collection of X displays on the local host.
The design of
.I xenodm
was guided by the needs of X terminals as well as The Open Group standard
XDMCP, the \fIX Display Manager Control Protocol\fP.
.I Xenodm
provides services similar to those provided by \fIinit\fP, \fIgetty\fP
and \fIlogin\fP on character terminals: prompting for login name and password,
authenticating the user, and running a ``session.''
.PP
A ``session'' is defined by the lifetime of a particular process; in the
traditional character-based terminal world, it is the user's login shell.
In the
.I xenodm
context, it is an arbitrary session manager.  This is because in a windowing
environment, a user's login shell process does not necessarily have any
terminal-like interface with which to connect.
When a real session manager is not available, a window manager or terminal
emulator is typically used as the ``session manager,'' meaning that
termination of this process terminates the user's session.
.PP
When the session is terminated, \fIxenodm\fP
resets the X server and (optionally) restarts the whole process.
.PP
Because
.I xenodm
provides the first interface that users will see, it is designed to be
simple to use and easy to customize to the needs of a particular site.
.I Xenodm
has many options, most of which have reasonable defaults.  Browse through the
various sections of this manual,
picking and choosing the things you want to change.
Pay particular attention to the
.B "Session Program"
section, which will describe how to
set up the style of session desired.
.SH "OVERVIEW"
\fIxenodm\fP is highly configurable, and most of its behavior can be
controlled by resource files and shell scripts.  The names of these
files themselves are resources read from the file \fIxenodm-config\fP or
the file named by the \fB\-config\fP option.
.PP
\fIxenodm\fP  can manage
X servers running on the local machine and specified in
\fIXservers\fP.
.PP
The resources of the X clients run by \fIxenodm\fP outside the user's
session, including \fIxenodm\fP's own login window, can be
affected by setting resources in the \fIXresources\fP file.
.PP
After resetting the X server, \fIxenodm\fP runs the \fIXsetup\fP script
to assist in setting up the screen the user sees along with the
\fIxlogin\fP widget.
.PP
The \fIxlogin\fP widget, which \fIxenodm\fP presents,
offers the familiar login and password prompts, unless
\fIautoLogin\fP is set.
.PP
After the user logs in, \fIxenodm\fP runs the \fIXstartup\fP script as
root.
.PP
Then \fIxenodm\fP runs the \fIXsession\fP script as the user.  This
system session file may do some additional startup and typically runs
the \fI.xsession\fP script in the user's home directory.
When the \fIXsession\fP script exits, the session is over.
.PP
At the end of the session, the \fIXreset\fP script is run to clean up,
the X server is reset, and the cycle starts over.
.PP
The file \fI XENODMLOGDIR/xenodm.log\fP will contain error
messages from
.I xenodm
and anything output to stderr by \fIXsetup, Xstartup, Xsession\fP
or \fIXreset\fP.
When you have trouble getting
.I xenodm
working, check this file to see if
.I xenodm
has any clues to the trouble.
.SH OPTIONS
.PP
All of these options, except \fB\-config\fP itself,
specify values that can also be specified in the configuration file
as resources.
.IP "\fB\-config\fP \fIconfiguration_file\fP"
Names the configuration file, which specifies resources to control
the behavior of
.I xenodm.
.I XENODMDIR/xenodm-config
is the default.
See the section \fBConfiguration File\fP.
.IP "\fB\-nodaemon\fP"
Specifies ``false'' as the value for the \fBDisplayManager.daemonMode\fP
resource.
This suppresses the normal daemon behavior, which is for
.I xenodm
to close all file descriptors, disassociate itself from
the controlling terminal, and put
itself in the background when it first starts up.
.IP "\fB\-debug\fP \fIdebug_level\fP"
Specifies the numeric value for the \fBDisplayManager.debugLevel\fP
resource.  A non-zero value causes
.I xenodm
to print lots of debugging statements to the terminal; it also disables the
\fBDisplayManager.daemonMode\fP resource, forcing
.I xenodm
to run synchronously.  To interpret these debugging messages, a copy
of the source code for
.I xenodm
is almost a necessity.  No attempt has been
made to rationalize or standardize the output.
.IP "\fB\-error\fP \fIerror_log_file\fP"
Specifies the value for the \fBDisplayManager.errorLogFile\fP resource.
This file contains errors from
.I xenodm
as well as anything written to stderr by the various scripts and programs
run during the progress of the session.
.IP "\fB\-resources\fP \fIresource_file\fP"
Specifies the value for the \fBDisplayManager*resources\fP resource.  This file
is loaded using
.IR xrdb (__appmansuffix__)
to specify configuration parameters for the
authentication widget.
.IP "\fB\-server\fP \fIserver_entry\fP"
Specifies the value for the \fBDisplayManager.servers\fP resource.
See the section
.B "Local Server Specification"
for a description of this resource.
.IP "\fB\-session\fP \fIsession_program\fP"
Specifies the value for the \fBDisplayManager*session\fP resource.  This
indicates the program to run as the session after the user has logged in.
.IP "\fB\-xrm\fP \fIresource_specification\fP"
Allows an arbitrary resource to be specified, as in most
X Toolkit applications.
.SH RESOURCES
At many stages the actions of
.I xenodm
can be controlled through the use of its configuration file, which is in the
X resource format.
Some resources modify the behavior of
.I xenodm
on all displays,
while others modify its behavior on a single display.  Where actions relate
to a specific display,
the display name is inserted into the resource name between
``DisplayManager'' and the final resource name segment.
.PP
For local displays, the resource name and class are as read from the
\fIXservers\fP file.
.PP
Because the resource
manager uses colons to separate the name of the resource from its value and
dots to separate resource name parts,
.I xenodm
substitutes underscores for both dots and colons when generating the resource
name.
For example, \fBDisplayManager.expo_x_org_0.startup\fP is the name of the
resource which defines the startup shell file for the ``expo.x.org:0'' display.
.\"
.IP "\fBDisplayManager.servers\fP"
This resource either specifies a file name full of server entries, one per
line (if the value starts with a slash), or a single server entry.
See the section \fBLocal Server Specification\fP for the details.
.IP "\fBDisplayManager.errorLogFile\fP"
Error output is normally directed at the system console.  To redirect it,
set this resource to a file name.  A method to send these messages to
.I syslog
should be developed for systems which support it; however, the
wide variety of interfaces precludes any system-independent
implementation.  This file also contains any output directed to stderr
by the \fIXsetup, Xstartup, Xsession\fP and \fIXreset\fP files,
so it will contain descriptions
of problems in those scripts as well.
.IP "\fBDisplayManager.debugLevel\fP"
If the integer value of this resource is greater than zero,
reams of
debugging information will be printed.  It also disables daemon mode, which
would redirect the information into the bit-bucket, and
allows non-root users to run
.I xenodm,
which would normally not be useful.
.IP "\fBDisplayManager.daemonMode\fP"
Normally,
.I xenodm
attempts to make itself into a daemon process unassociated with any terminal.
This is
accomplished by forking and leaving the parent process to exit, then closing
file descriptors and releasing the controlling terminal.  In some
environments this is not desired (in particular, when debugging).  Setting
this resource to ``false'' will disable this feature.
.IP "\fBDisplayManager.authDir\fP"
This names a directory under which
.I xenodm
stores authorization files while initializing the session.  The
default value is \fI XENODMXAUTHDIR.\fP
Can be overridden for specific displays by
DisplayManager.\fIDISPLAY\fP.authFile.
.IP \fBDisplayManager.autoRescan\fP
This boolean controls whether
.I xenodm
rescans the configuration, servers, access control and authentication keys
files after a session terminates and the files have changed.  By default it
is ``true.''  You can force
.I xenodm
to reread these files by sending a SIGHUP to the main process.
.IP \fBDisplayManager.exportList\fP
A list of additional environment variables, separated by white space,
to pass on to the \fIXsetup\fP,
\fIXstartup\fP, \fIXsession\fP, and \fIXreset\fP programs.
.\"
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.autoLogin\fP"
This resource specifes the name of an user that will be logged in
automatically, without displaying the xlogin widget.
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.resources\fP"
This resource specifies the name of the file to be loaded by \fIxrdb\fP
as the resource database onto the root window of screen 0 of the display.
The \fIXsetup\fP program and the Login widget will use
the resources set in this file.
This resource data base is loaded just before the authentication procedure
is started, so it can control the appearance of the login window.  See the
section
.B "Authentication Widget,"
which describes the various
resources that are appropriate to place in this file.
There is no default value for this resource, but
\fI XENODMDIR/Xresources\fP
is the conventional name.
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.xrdb\fP"
Specifies the program used to load the resources.  By default,
.I xenodm
uses \fI BINDIR/xrdb\fP.
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.cpp\fP"
This specifies the name of the C preprocessor which is used by \fIxrdb\fP.
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.setup\fP"
This specifies a program which is run (as root) before offering the
Login window.  This may be used to change the appearance of the screen
around the Login window or to put up other windows (e.g., you may want
to run \fIxconsole\fP here).
By default, no program is run.  The conventional name for a
file used here is \fIXsetup\fP.
See the section \fBSetup Program.\fP
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.startup\fP"
This specifies a program which is run (as root) after the authentication
process succeeds.  By default, no program is run.  The conventional name for a
file used here is \fIXstartup\fP.
See the section \fBStartup Program.\fP
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.session\fP"
This specifies the session to be executed (not running as root).
By default, \fI BINDIR/xterm\fP is
run.  The conventional name is \fIXsession\fP.
See the section
.B "Session Program."
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.reset\fP"
This specifies a program which is run (as root) after the session terminates.
By default, no program is run.
The conventional name is \fIXreset\fP.
See the section
.B "Reset Program."
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.openDelay\fP"
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.openRepeat\fP"
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.openTimeout\fP"
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.startAttempts\fP"
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.reservAttempts\fP"
These numeric resources control the behavior of
.I xenodm
when attempting to open intransigent servers.  \fBopenDelay\fP is
the length of the
pause in seconds between successive attempts, \fBopenRepeat\fP is the
number of attempts to make, \fBopenTimeout\fP is the amount of time
to wait while actually
attempting the open (i.e., the maximum time spent in the
.IR connect (2)
system call) and \fBstartAttempts\fP is the number of times this
entire process is done before giving up on the server.
After \fBopenRepeat\fP attempts have been made, or
if \fBopenTimeout\fP seconds elapse in any particular attempt,
.I xenodm
terminates and restarts the server, attempting to connect again.
This process is repeated \fBstartAttempts\fP times, at which point
the display is declared dead and disabled.  Although
this behavior may seem arbitrary, it has been empirically developed and
works quite well on most systems.  The bound \fBreservAttempts\fP
is the number of times a successful connect is allowed to be followed
by a fatal error.  When reached, the display is disabled.
The default values are
\fBopenDelay\fP: 15, \fBopenRepeat\fP: 5, \fBopenTimeout\fP: 120,
\fBstartAttempts\fP: 4 and \fBreservAttempts\fP: 2.
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.terminateServer\fP"
This boolean resource specifies whether the X server should be terminated
when a session terminates (instead of resetting it).  This option can be
used when the server tends to grow without bound over time, in order to limit
the amount of time the server is run.  The default value is ``false.''
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.userPath\fP"
.I Xenodm
sets the PATH environment variable for the session to this value.  It should
be a colon separated list of directories; see
.IR sh (__appmansuffix__)
for a full description.
The default value is ``DEF_USER_PATH''.
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.systemPath\fP"
.I Xenodm
sets the PATH environment variable for the startup and reset scripts to the
value of this resource.  The default for this resource is ``DEF_SYSTEM_PATH''.
Note the absence of ``.'' from this entry.  This is a good practice to
follow for root; it avoids many common Trojan Horse system penetration
schemes.
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.systemShell\fP"
.I Xenodm
sets the SHELL environment variable for the startup and reset scripts to the
value of this resource.  It is \fI/bin/sh\fP by default.
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.failsafeClient\fP"
If the default session fails to execute,
.I xenodm
will fall back to this program.  This program is executed with no
arguments, but executes using the same environment variables as
the session would have had (see the section \fBSession Program\fP).
By default, \fI BINDIR/xterm\fP is used.
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.grabServer\fP"
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.grabTimeout\fP"
To improve security,
.I xenodm
grabs the server and keyboard while reading the login name and password.
The
\fBgrabServer\fP resource specifies if the server should be held for the
duration of the name/password reading.  When ``false,'' the server is ungrabbed
after the keyboard grab succeeds, otherwise the server is grabbed until just
before the session begins.  The default is ``false.''
The \fBgrabTimeout\fP resource specifies the maximum time
.I xenodm
will wait for the grab to succeed.  The grab may fail if some other
client has the server grabbed, or possibly if the network latencies
are very high.  This resource has a default value of 3 seconds; you
should be cautious when raising it, as a user can be spoofed by a
look-alike window on the display.  If the grab fails,
.I xenodm
kills and restarts the server (if possible) and the session.
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.authorize\fP"
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.authName\fP"
\fBauthorize\fP is a boolean resource which controls whether
.I xenodm
generates and uses authorization for the local server connections.  If
authorization is used, \fBauthName\fP is a list
of authorization mechanisms to use, separated by white space.
XDMCP connections dynamically specify which
authorization mechanisms are supported, so
\fBauthName\fP is ignored in this case.  When \fBauthorize\fP is set for a
display and authorization is not available, the user is informed by having a
different message displayed in the login widget.  By default, \fBauthorize\fP
is ``true,''  \fBauthName\fP is ``MIT-MAGIC-COOKIE-1,'' or, if
XDM-AUTHORIZATION-1 is available, ``XDM-AUTHORIZATION-1\0MIT-MAGIC-COOKIE-1.''
.IP \fBDisplayManager.\fP\fIDISPLAY\fP\fB.authFile\fP
This file is used to communicate the authorization data from
.I xenodm
to the server, using the \fB\-auth\fP server command line option.
It should be
kept in a directory which is not world-writable as it could easily be
removed, disabling the authorization mechanism in the server.
If not specified, a name is generated from DisplayManager.authDir and
the name of the display.
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.authComplain\fP"
If set to ``false,'' disables the use of the \fBunsecureGreeting\fP
in the login window.
See the section \fBAuthentication Widget.\fP
The default is ``true.''
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.resetSignal\fP"
The number of the signal \fIxenodm\fP sends to reset the server.
See the section \fBControlling the Server.\fP
The default is 1 (SIGHUP).
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.termSignal\fP"
The number of the signal \fIxenodm\fP sends to terminate the server.
See the section \fBControlling the Server.\fP
The default is 15 (SIGTERM).
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.resetForAuth\fP"
The original implementation of authorization in the sample server reread the
authorization file at server reset time, instead of when checking the
initial connection.  As
.I xenodm
generates the authorization information just before connecting to the
display, an old server would not get up-to-date authorization information.
This resource causes
.I xenodm
to send SIGHUP to the server after setting up the file, causing an
additional server reset to occur, during which time the new authorization
information will be read.
The default is ``false,'' which will work for all MIT servers.
.IP "\fBDisplayManager.\fP\fIDISPLAY\fP\fB.userAuthDir\fP"
When
.I xenodm
is unable to write to the usual user authorization file ($HOME/.Xauthority),
it creates a unique file name in this directory and points the environment
variable XAUTHORITY at the created file.  It uses \fI/tmp\fP by default.
.SH "CONFIGURATION FILE"
First, the
.I xenodm
configuration file should be set up.
Make a directory (usually \fI XENODMDIR\fP) to contain all
of the relevant files.
.LP
Here is a reasonable configuration file, which could be
named \fIxenodm-config\fP:
.nf

.ta .5i 4i

	DisplayManager.servers:	XENODMDIR/Xservers
	DisplayManager.errorLogFile:	XENODMLOGDIR/xenodm.log
	DisplayManager*resources:	XENODMDIR/Xresources
	DisplayManager*startup:	XENODMDIR/Xstartup
	DisplayManager*session:	XENODMDIR/Xsession
	DisplayManager._0.authorize:	true
	DisplayManager*authorize:	false

.fi
.PP
Note that this file mostly contains references to other files.  Note also
that some of the resources are specified with ``*'' separating the
components.  These resources can be made unique for each different display,
by replacing the ``*'' with the display-name, but normally this is not very
useful.  See the \fBResources\fP section for a complete discussion.
.SH "LOCAL SERVER SPECIFICATION"
.PP
The resource \fBDisplayManager.servers\fP gives a server specification
or, if the values starts with a slash (/), the name of a file
containing server specifications, one per line.
.PP
Each specification
indicates a display which should constantly be managed and which is
not using XDMCP.
This method is used typically for local servers only.  If the resource
or the file named by the resource is empty, \fIxenodm\fP will exit.
.PP
Each specification consists of at least three parts:  a display
name, a display class, a display type, and (for local servers) a command
line to start the server.  A typical entry for local display number 0 would
be:
.nf

  :0 local BINDIR/X :0

.fi
The only recognized display types is:
.ta 1i
.nf

local		local display: \fIxenodm\fP will run the server

.fi
.PP
The display name must be something that can be passed in the \fB\-display\fP
option to an X program.  This string is used to generate the display-specific
resource names, so be careful to match the
names (e.g., use ``:0 local BINDIR/X :0'' instead of
``localhost:0 local BINDIR/X :0''
if your other resources are specified as
``DisplayManager._0.session'').  The display class portion is also used in the
display-specific resources, as the class of the resource.  This is
useful if you have a large collection of similar displays (such as a corral of
X terminals) and would like to set resources for groups of them.
.PP
When \fIxenodm\fP starts a session, it sets up authorization data for the
server.  For local servers, \fIxenodm\fP passes
``\fB\-auth\fP \fIfilename\fP'' on the server's command line to point
it at its authorization data.
.SH RESOURCES FILE
The \fIXresources\fP file is
loaded onto the display as a resource database using
.I xrdb.
As the authentication
widget reads this database before starting up, it usually contains
parameters for that widget:
.nf
.ta .5i 1i

	xlogin*login.translations: #override\\
		Ctrl<Key>R: abort-display()\\n\\
		<Key>F1: set-session-argument(failsafe) finish-field()\\n\\
		<Key>Return: set-session-argument() finish-field()
	xlogin*borderWidth: 3
	xlogin*greeting: CLIENTHOST
\&	#ifdef COLOR
	xlogin*greetColor: CadetBlue
	xlogin*failColor: red
\&	#endif

.fi
.PP
Please note the translations entry; it specifies
a few new translations for the widget which allow users to escape from the
default session (and avoid troubles that may occur in it).  Note that if
\&#override is not specified, the default translations are removed and replaced
by the new value, not a very useful result as some of the default translations
are quite useful (such as ``<Key>: insert-char ()'' which responds to normal
typing).
.PP
This file may also contain resources for the setup program.
.SH "SETUP PROGRAM"
The \fIXsetup\fP file is run after
the server is reset, but before the Login window is offered.
The file is typically a shell script.
It is run as root, so should be careful about security.
This is the place to change the root background or bring up other
windows that should appear on the screen along with the Login widget.
.PP
In addition to any specified by \fBDisplayManager.exportList\fP,
the following environment variables are passed:
.nf
.ta .5i 2i

	DISPLAY	the associated display name
	PATH	the value of \fBDisplayManager.\fP\fIDISPLAY\fP\fB.systemPath\fP
	SHELL	the value of \fBDisplayManager.\fP\fIDISPLAY\fP\fB.systemShell\fP
	XAUTHORITY	may be set to an authority file
.fi
.PP
Note that since \fIxenodm\fP grabs the keyboard, any other windows will not be
able to receive keyboard input.  They will be able to interact with
the mouse, however; beware of potential security holes here.
If \fBDisplayManager.\fP\fIDISPLAY\fP\fB.grabServer\fP is set,
\fIXsetup\fP will not be able to connect
to the display at all.
Resources for this program
can be put into the file named by
\fBDisplayManager.\fP\fIDISPLAY\fP\fB.resources\fP.
.PP
Here is a sample \fIXsetup\fP script:
.nf

\&	#!/bin/sh
\&	# Xsetup_0 \- setup script for one workstation
	xcmsdb < XENODMDIR/monitors/alex.0
	xconsole\0\-geometry\0480x130\-0\-0\0\-notify\0\-verbose\0\-exitOnFail &

.fi
.SH "AUTHENTICATION WIDGET"
The authentication widget prompts the user for the username, password, and/or
other required authentication data from the keyboard.  Nearly every imaginable
parameter can be controlled with a resource.  Resources for this widget
should be put into the file named by
\fBDisplayManager.\fP\fIDISPLAY\fP\fB.resources\fP.  All of these have reasonable
default values, so it is not necessary to specify any of them.
.PP
The resource file is loaded with
.IR xrdb (__appmansuffix__)
so it may use the substitutions defined by that program such as CLIENTHOST
for the client hostname in the login message, or C pre-processor #ifdef
statements to produce different displays depending on color depth or other
variables.
.PP
.I Xenodm
is compiled with support for the
.IR Xft (__libmansuffix__)
library for font rendering.  Font faces are
specified using the resources with names ending in ``face'' in the
fontconfig face format described in the
.I Font Names
section of
.IR fonts.conf (__filemansuffix__).
.IP "\fBxlogin.Login.width, xlogin.Login.height, xlogin.Login.x, xlogin.Login.y\fP"
The geometry of the Login widget is normally computed automatically.  If you
wish to position it elsewhere, specify each of these resources.
.IP "\fBxlogin.Login.foreground\fP"
The color used to display the input typed by the user.
.IP "\fBxlogin.Login.face\fP"
The face used to display the input typed by the user.
The default is ``Serif-18''.
.IP "\fBxlogin.Login.greeting\fP"
A string which identifies this window.
The default is ``X Window System.''
.IP "\fBxlogin.Login.unsecureGreeting\fP"
When X authorization is requested in the configuration file for this
display and none is in use, this greeting replaces the standard
greeting.  The default is ``This is an unsecure session''
.IP "\fBxlogin.Login.greetFace\fP"
The face used to display the greeting.
The default is ``Serif-24:italic''.
.IP "\fBxlogin.Login.greetColor\fP"
The color used to display the greeting.
.IP "\fBxlogin.Login.namePrompt\fP"
The string displayed to prompt for a user name.
.I Xrdb
strips trailing white space from resource values, so to add spaces at
the end of the prompt (usually a nice thing), add spaces escaped with
backslashes.  The default is ``Login:  ''
.IP "\fBxlogin.Login.passwdPrompt\fP"
The string displayed to prompt for a password, when not using an authentication
system such as PAM that provides its own prompts.
The default is ``Password:  ''
.IP "\fBxlogin.Login.promptFace\fP"
The face used to display prompts.
The default is ``Serif-18:bold''.
.IP "\fBxlogin.Login.promptColor\fP"
The color used to display prompts.
.IP "\fBxlogin.Login.changePasswdMessage\fP"
A message which is displayed when the users password has expired.
The default is ``Password Change Required''
.IP "\fBxlogin.Login.fail\fP"
A message which is displayed when the authentication fails, when not using an
authentication system such as PAM that provides its own prompts.
The default is ``Login incorrect''
.IP "\fBxlogin.Login.failFace\fP"
The face used to display the failure message.
The default is ``Serif-18:bold''.
.IP "\fBxlogin.Login.failColor\fP"
The color used to display the failure message.
.IP "\fBxlogin.Login.failTimeout\fP"
The number of seconds that the failure message is displayed.
The default is 10.
.IP "\fBxlogin.Login.logoFileName\fP"
Name of an XPM format pixmap to display in the greeter window, if built with
XPM support.   The default is no pixmap.
.IP "\fBxlogin.Login.logoPadding\fP"
Number of pixels of space between the logo pixmap and other elements of the
greeter window, if the pixmap is displayed.
The default is 5.
.IP "\fBxlogin.Login.useShape\fP"
If set to ``true'', when built with XPM support, attempt to use the
X Non-Rectangular Window Shape Extension to set the window shape.
The default is ``true''.
.IP "\fBxlogin.Login.hiColor\fP, \fBxlogin.Login.shdColor\fP"
Raised appearance bezels may be drawn around
the greeter frame and text input boxes by setting these resources.  hiColor
is the highlight color, used on the top and left sides of the frame, and the
bottom and right sides of text input areas.   shdColor is the shadow color,
used on the bottom and right sides of the frame, and the top and left sides
of text input areas.
The default for both is the foreground color, providing a flat appearance.
.IP "\fBxlogin.Login.frameWidth\fP"
frameWidth is the width in pixels of the area
around the greeter frame drawn in hiColor and shdColor.
.IP "\fBxlogin.Login.innerFramesWidth\fP"
innerFramesWidth is the width in pixels of the
area around text input areas drawn in hiColor and shdColor.
.IP "\fBxlogin.Login.sepWidth\fP"
sepWidth is the width in pixels of the
bezeled line between the greeting and input areas
drawn in hiColor and shdColor.
.IP "\fBxlogin.Login.allowRootLogin\fP"
If set to ``false'', don't allow root (and any other user with uid = 0) to
log in directly.
The default is ``true''.
This setting is only checked by some of the authentication backends at this
time.
.IP "\fBxlogin.Login.allowNullPasswd\fP"
If set to ``true'', allow an otherwise failing password match to succeed
if the account does not require a password at all.
The default is ``false'', so only users that have passwords assigned can
log in.
.IP "\fBxlogin.Login.echoPasswd\fP"
If set to ``true'', a placeholder character (echoPasswdChar) will be shown
for fields normally set to not echo, such as password input.
The default is ``false''.
.IP "\fBxlogin.Login.echoPasswdChar\fP"
Character to display if echoPasswd is true.  The default is ``*''.
If set to an empty value, the cursor will advance for each character input,
but no text will be drawn.
.IP "\fBxlogin.Login.translations\fP"
This specifies the translations used for the login widget.  Refer to the X
Toolkit documentation for a complete discussion on translations.  The default
translation table is:
.nf
.ta .5i 2i

	Ctrl<Key>H:	delete-previous-character() \\n\\
	Ctrl<Key>D:	delete-character() \\n\\
	Ctrl<Key>B:	move-backward-character() \\n\\
	Ctrl<Key>F:	move-forward-character() \\n\\
	Ctrl<Key>A:	move-to-begining() \\n\\
	Ctrl<Key>E:	move-to-end() \\n\\
	Ctrl<Key>K:	erase-to-end-of-line() \\n\\
	Ctrl<Key>U:	erase-line() \\n\\
	Ctrl<Key>X:	erase-line() \\n\\
	Ctrl<Key>C:	restart-session() \\n\\
	Ctrl<Key>\\\\:	abort-session() \\n\\
	<Key>BackSpace:	delete-previous-character() \\n\\
	<Key>Delete:	delete-previous-character() \\n\\
	<Key>Return:	finish-field() \\n\\
	<Key>:	insert-char() \\

.fi
.PP
The actions which are supported by the widget are:
.IP "delete-previous-character"
Erases the character before the cursor.
.IP "delete-character"
Erases the character after the cursor.
.IP "move-backward-character"
Moves the cursor backward.
.IP "move-forward-character"
Moves the cursor forward.
.IP "move-to-begining"
(Apologies about the spelling error.)
Moves the cursor to the beginning of the editable text.
.IP "move-to-end"
Moves the cursor to the end of the editable text.
.IP "erase-to-end-of-line"
Erases all text after the cursor.
.IP "erase-line"
Erases the entire text.
.IP "finish-field"
If the cursor is in the name field, proceeds to the password field; if the
cursor is in the password field, checks the current name/password pair.  If
the name/password pair is valid, \fIxenodm\fP
starts the session.  Otherwise the failure message is displayed and
the user is prompted again.
.IP "abort-session"
Terminates and restarts the server.
.IP "abort-display"
Terminates the server, disabling it.  This action
is not accessible in the default configuration.
There are various reasons to stop \fIxenodm\fP on a system console, such as
when shutting the system down, when using \fIxdmshell\fP,
to start another type of server, or to generally access the console.
Sending \fIxenodm\fP a SIGHUP will restart the display.  See the section
\fBControlling XENODM\fP.
.IP "restart-session"
Resets the X server and starts a new session.  This can be used when
the resources have been changed and you want to test them or when
the screen has been overwritten with system messages.
.IP "insert-char"
Inserts the character typed.
.IP "set-session-argument"
Specifies a single word argument which is passed to the session at startup.
See the section \fBSession Program\fP.
.IP "allow-all-access"
Disables access control in the server.  This can be used when
the .Xauthority file cannot be created by
.I xenodm.
Be very careful using this;
it might be better to disconnect the machine from the network
before doing this.
.PP
On some systems (OpenBSD) the user's shell must be listed in
.I /etc/shells
to allow login through xenodm. The normal password and account expiration
dates are enforced too.
.SH "STARTUP PROGRAM"
.PP
The \fIXstartup\fP program is run as
root when the user logs in.
It is typically a shell script.
Since it is run as root, \fIXstartup\fP should be
very careful about security.  This is the place to put commands which add
entries to \fIutmp\fP or \fIwtmp\fP files,
(the \fIsessreg\fP program may be useful here),
mount users' home directories from file servers,
or abort the session if logins are not
allowed.
.PP
In addition to any specified by \fBDisplayManager.exportList\fP,
the following environment variables are passed:
.nf
.ta .5i 2i

	DISPLAY	the associated display name
	HOME	the initial working directory of the user
	LOGNAME	the user name
	USER	the user name
	PATH	the value of \fBDisplayManager.\fP\fIDISPLAY\fP\fB.systemPath\fP
	SHELL	the value of \fBDisplayManager.\fP\fIDISPLAY\fP\fB.systemShell\fP
	XAUTHORITY	may be set to an authority file
	WINDOWPATH	may be set to the "window path" leading to the X server

.fi
.PP
No arguments are passed to the script.
.I Xenodm
waits until this script exits before starting the user session.  If the
exit value of this script is non-zero,
.I xenodm
discontinues the session and starts another authentication
cycle.
.PP
The sample \fIXstartup\fP file shown here prevents login while the
file \fI/etc/nologin\fP
exists.
Thus this is not a complete example, but
simply a demonstration of the available functionality.
.PP
Here is a sample \fIXstartup\fP script:
.nf
.ta .5i 1i

\&	#!/bin/sh
\&	#
\&	# Xstartup
\&	#
\&	# This program is run as root after the user is verified
\&	#
	if [ \-f /etc/nologin ]; then
		xmessage\0\-file /etc/nologin\0\-timeout 30\0\-center
		exit 1
	fi
	sessreg\0\-a\0\-l $DISPLAY\0\-x XENODMDIR/Xservers $LOGNAME
	XENODMDIR/GiveConsole
	exit 0
.fi
.SH "SESSION PROGRAM"
.PP
The \fIXsession\fP program is the command which is run as the user's session.
It is run with
the permissions of the authorized user.
.PP
In addition to any specified by \fBDisplayManager.exportList\fP,
the following environment variables are passed:
.nf
.ta .5i 2i

	DISPLAY	the associated display name
	HOME	the initial working directory of the user
	LOGNAME	the user name
	USER	the user name
	PATH	the value of \fBDisplayManager.\fP\fIDISPLAY\fP\fB.userPath\fP
	SHELL	the user's default shell (from \fIgetpwnam\fP)
	XAUTHORITY	may be set to a non-standard authority file
	KRB5CCNAME	may be set to a Kerberos credentials cache name
	WINDOWPATH	may be set to the "window path" leading to the X server

.fi
.PP
At most installations, \fIXsession\fP should look in $HOME for
a file \fI\.xsession,\fP
which contains commands that each user would like to use as a session.
\fIXsession\fP should also
implement a system default session if no user-specified session exists.
.PP
An argument may be passed to this program from the authentication widget
using the `set-session-argument' action.  This can be used to select
different styles of session.  One good use of this feature is to allow
the user to escape from the ordinary session when it fails.  This
allows users to repair their own \fI.xsession\fP if it fails,
without requiring administrative intervention.
The example following
demonstrates this feature.
.PP
This example recognizes
the special
``failsafe'' mode, specified in the translations
in the \fIXresources\fP file, to provide an escape
from the ordinary session.  It also requires that the .xsession file
be executable so we don't have to guess what shell it wants to use.
.nf
.ta .5i 1i 1.5i

\&	#!/bin/sh
\&	#
\&	# Xsession
\&	#
\&	# This is the program that is run as the client
\&	# for the display manager.

	case $# in
	1)
		case $1 in
		failsafe)
			exec xterm \-geometry 80x24\-0\-0
			;;
		esac
	esac

	startup=$HOME/.xsession
	resources=$HOME/.Xresources

	if [ \-f "$startup" ]; then
		exec "$startup"
	else
		if [ \-f "$resources" ]; then
			xrdb \-load "$resources"
		fi
		twm &
		xman \-geometry +10\-10 &
		exec xterm \-geometry 80x24+10+10 \-ls
	fi

.fi
.PP
The user's \fI.xsession\fP file might look something like this
example.  Don't forget that the file must have execute permission.
.nf
\&	#! /bin/csh
\&	# no \-f in the previous line so .cshrc gets run to set $PATH
	twm &
	xrdb \-merge "$HOME/.Xresources"
	emacs \-geometry +0+50 &
	xbiff \-geometry \-430+5 &
	xterm \-geometry \-0+50 -ls
.fi
.SH "RESET PROGRAM"
.PP
Symmetrical with \fIXstartup\fP,
the \fIXreset\fP script is run after the user session has
terminated.  Run as root, it should contain commands that undo
the effects of commands in \fIXstartup,\fP updating entries
in \fIutmp\fP or \fIwtmp\fP files,
or unmounting directories from file servers.  The environment
variables that were passed to \fIXstartup\fP are also
passed to \fIXreset\fP.
.PP
A sample \fIXreset\fP script:
.nf
.ta .5i 1i
\&	#!/bin/sh
\&	#
\&	# Xreset
\&	#
\&	# This program is run as root after the session ends
\&	#
	sessreg\0\-d\0\-l $DISPLAY\0\-x XENODMDIR/Xservers $LOGNAME
	XENODMDIR/TakeConsole
	exit 0
.fi
.SH "CONTROLLING THE SERVER"
.I Xenodm
controls local servers using POSIX signals.  SIGHUP is expected to reset the
server, closing all client connections and performing other cleanup
duties.  SIGTERM is expected to terminate the server.
If these signals do not perform the expected actions,
the resources \fBDisplayManager.\fP\fIDISPLAY\fP\fB.resetSignal\fP and
\fBDisplayManager.\fP\fIDISPLAY\fP\fB.termSignal\fP can specify alternate signals.
.SH "CONTROLLING XENODM"
.PP
.I Xenodm
responds to two signals: SIGHUP and SIGTERM.  When sent a SIGHUP,
.I xenodm
rereads the configuration file, the access control file, and the servers
file.  For the servers file, it notices if entries have been added or
removed.  If a new entry has been added,
.I xenodm
starts a session on the associated display.  Entries which have been removed
are disabled immediately, meaning that any session in progress will be
terminated without notice and no new session will be started.
.PP
When sent a SIGTERM,
.I xenodm
terminates all sessions in progress and exits.  This can be used when
shutting down the system.
.PP
.I Xenodm
attempts to mark its various sub-processes for
.IR ps (__appmansuffix__)
by editing the
command line argument list in place.  Because
.I xenodm
can't allocate additional
space for this task, it is useful to start
.I xenodm
with a reasonably long
command line (using the full path name should be enough).
Each process which is
servicing a display is marked \fB\-\fP\fIdisplay.\fP
.SH "ADDITIONAL LOCAL DISPLAYS"
.PP
To add an additional local display, add a line for it to the
\fIXservers\fP file.
(See the section \fBLocal Server Specification\fP.)
.PP
Examine the display-specific resources in \fIxenodm-config\fP
(e.g., \fBDisplayManager._0.authorize\fP)
and consider which of them should be copied for the new display.
The default \fIxenodm-config\fP has all the appropriate lines for
displays \fB:0\fP and \fB:1\fP.
.SH "OTHER POSSIBILITIES"
.PP
You can use \fIxenodm\fP
to run a single session at a time, using the 4.3 \fIinit\fP
options or other suitable daemon by specifying the server on the command
line:
.nf
.ta .5i

	xenodm \-server \(lq:0 local BINDIR/X :0\(rq

.fi
.PP
.SH LIMITATIONS
One thing that
.I xenodm
isn't very good at doing is coexisting with other window systems.  To use
multiple window systems on the same hardware, you'll probably be more
interested in
.I xinit.
.SH FILES
.TP 20
.I XENODMDIR/xenodm-config
the default configuration file
.TP 20
.I $HOME/.Xauthority
user authorization file where \fIxenodm\fP stores keys for clients to read
.TP 20
.I BINDIR/xrdb
the default resource database loader
.TP 20
.I BINDIR/X
the default server
.TP 20
.I BINDIR/xterm
the default session program and failsafe client
.TP 20
.I XENODMXAUTHDIR/A<display>\-<suffix>
the default place for authorization files
.TP 20
.I /tmp/K5C<display>
Kerberos credentials cache
.SH "SEE ALSO"
.IR X (__miscmansuffix__),
.IR xinit (__appmansuffix__),
.IR xauth (__appmansuffix__),
.IR xrdb (__appmansuffix__),
.IR Xsecurity (__miscmansuffix__),
.IR sessreg (__appmansuffix__),
.IR Xserver (__appmansuffix__),
.IR fonts.conf (__filemansuffix__).
.br
.I "X Display Manager Control Protocol"
.br
.RI "IETF RFC 4291: " "IP Version 6 Addressing Architecture" .
.SH AUTHOR
Keith Packard, MIT X Consortium
